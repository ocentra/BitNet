name: Build macOS Binaries Only

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release after build'
        required: false
        default: 'false'

jobs:
  # ============================================================================
  # Build CPU Binary for macOS (ARM64 TL1)
  # ============================================================================
  build-cpu-macos:
    name: Build CPU Binary (macOS ARM64 TL1)
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install dependencies
        run: brew install cmake
      
      - name: Build Standard CPU Binary (Metal)
        run: |
          echo "🔨 Building Standard CPU Binary (Metal)..."
          mkdir build-standard && cd build-standard
          if cmake .. -DGGML_METAL=ON -DLLAMA_BUILD_SERVER=ON -DLLAMA_BUILD_EXAMPLES=ON -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ && cmake --build . --config Release; then
            echo "✅ Standard CPU build SUCCESS"
            echo "STANDARD_BUILD_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "❌ Standard CPU build FAILED"
            echo "STANDARD_BUILD_SUCCESS=false" >> $GITHUB_ENV
          fi
      
      - name: Build BitNet CPU Binary (ARM TL1)
        run: |
          echo "🔨 Building BitNet CPU Binary (ARM TL1)..."
          mkdir build-bitnet && cd build-bitnet
          if cmake .. -DBITNET_ARM_TL1=ON -DLLAMA_BUILD_SERVER=ON -DLLAMA_BUILD_EXAMPLES=ON -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ && cmake --build . --config Release; then
            echo "✅ BitNet CPU build SUCCESS"
            echo "BITNET_BUILD_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "❌ BitNet CPU build FAILED"
            echo "BITNET_BUILD_SUCCESS=false" >> $GITHUB_ENV
          fi
      
      - name: Verify and organize
        run: |
          echo "📁 Organizing build artifacts..."
          mkdir -p Release/cpu/macos
          
          # Copy Standard binaries (Metal) - only if build succeeded
          if [ "$STANDARD_BUILD_SUCCESS" = "true" ] && [ -f "build-standard/bin/llama-server" ]; then
            cp build-standard/bin/llama-server Release/cpu/macos/llama-server-standard
            chmod +x Release/cpu/macos/llama-server-standard
            echo "✅ Standard CPU binary: $(ls -lh build-standard/bin/llama-server | awk '{print $5}')"
            
            if [ -f "build-standard/bin/llama-cli" ]; then
              cp build-standard/bin/llama-cli Release/cpu/macos/llama-cli-standard
              chmod +x Release/cpu/macos/llama-cli-standard
              echo "✅ Standard CLI binary: $(ls -lh build-standard/bin/llama-cli | awk '{print $5}')"
            fi
            
            if [ -f "build-standard/bin/llama-bench" ]; then
              cp build-standard/bin/llama-bench Release/cpu/macos/llama-bench-standard
              chmod +x Release/cpu/macos/llama-bench-standard
              echo "✅ Standard bench binary: $(ls -lh build-standard/bin/llama-bench | awk '{print $5}')"
            fi
          else
            echo "⚠️ Standard CPU build failed or binaries not found - skipping"
          fi
          
          # Copy BitNet binaries (ARM TL1) - only if build succeeded
          if [ "$BITNET_BUILD_SUCCESS" = "true" ] && [ -f "build-bitnet/bin/llama-server" ]; then
            cp build-bitnet/bin/llama-server Release/cpu/macos/llama-server-bitnet
            chmod +x Release/cpu/macos/llama-server-bitnet
            echo "✅ BitNet CPU binary: $(ls -lh build-bitnet/bin/llama-server | awk '{print $5}')"
            
            if [ -f "build-bitnet/bin/llama-cli" ]; then
              cp build-bitnet/bin/llama-cli Release/cpu/macos/llama-cli-bitnet
              chmod +x Release/cpu/macos/llama-cli-bitnet
              echo "✅ BitNet CLI binary: $(ls -lh build-bitnet/bin/llama-cli | awk '{print $5}')"
            fi
            
            if [ -f "build-bitnet/bin/llama-bench" ]; then
              cp build-bitnet/bin/llama-bench Release/cpu/macos/llama-bench-bitnet
              chmod +x Release/cpu/macos/llama-bench-bitnet
              echo "✅ BitNet bench binary: $(ls -lh build-bitnet/bin/llama-bench | awk '{print $5}')"
            fi
          else
            echo "⚠️ BitNet CPU build failed or binaries not found - skipping"
          fi
          
          # Create build summary
          echo ""
          echo "📋 BUILD SUMMARY:"
          echo "Standard CPU Build: $([ "$STANDARD_BUILD_SUCCESS" = "true" ] && echo "✅ SUCCESS" || echo "❌ FAILED")"
          echo "BitNet CPU Build: $([ "$BITNET_BUILD_SUCCESS" = "true" ] && echo "✅ SUCCESS" || echo "❌ FAILED")"
          echo ""
          echo "📁 Final Release Structure:"
          ls -lh Release/cpu/macos/ 2>/dev/null || echo "No binaries copied"
      
      - name: Upload CPU artifact
        uses: actions/upload-artifact@v4
        with:
          name: cpu-macos
          path: Release/cpu/macos/

  # ============================================================================
  # Copy GPU Modules for macOS (No CUDA)
  # ============================================================================
  copy-gpu-modules-macos:
    name: Copy GPU Modules (macOS - No CUDA)
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Copy Python modules
        run: |
          mkdir -p Release/gpu/macos
          
          # Copy Python modules
          cp gpu/*.py Release/gpu/macos/
          cp gpu/tokenizer.model Release/gpu/macos/
          
          # Create README
          cat > Release/gpu/macos/README.txt << 'EOF'
          macOS GPU Support Limitation
          =============================
          
          macOS does not support NVIDIA CUDA.
          GPU acceleration is only available on:
          - Windows with NVIDIA GPU (build locally)
          - Linux with NVIDIA GPU (build locally)
          
          On macOS, use CPU backend (ARM TL1 optimized).
          EOF
          
          echo "✅ GPU modules copied (no CUDA kernel)"
      
      - name: Upload GPU artifact
        uses: actions/upload-artifact@v4
        with:
          name: gpu-macos
          path: Release/gpu/macos/

  # ============================================================================
  # Create Release Placeholder (Optional)
  # ============================================================================
  create-release:
    name: Create Release Placeholder
    needs: [build-cpu-macos, copy-gpu-modules-macos]
    runs-on: ubuntu-latest
    if: github.event.inputs.create_release == 'true'
    
    steps:
      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Organize Release structure
        run: |
          mkdir -p Release/cpu/macos
          mkdir -p Release/gpu/macos
          
          # Copy macOS builds
          cp artifacts/cpu-macos/* Release/cpu/macos/ 2>/dev/null || true
          cp -r artifacts/gpu-macos/* Release/gpu/macos/ 2>/dev/null || true
          
          # Create placeholder README
          cat > Release/README.md << 'EOF'
          # BitNet macOS Release
          
          This release contains only macOS binaries.
          Windows and Linux binaries are built locally and uploaded manually.
          
          ## What's Included:
          - ✅ macOS CPU binary (ARM64 TL1 kernels)
          - ✅ macOS GPU modules (Python only, no CUDA)
          
          ## What's Built Locally:
          - Windows CPU + GPU (built on Windows with CUDA)
          - Linux CPU + GPU (built on WSL2/Docker with CUDA)
          
          ## Directory Structure:
          ```
          Release/
          ├── cpu/
          │   ├── macos/llama-server (from CI)
          │   ├── windows/llama-server.exe (upload manually)
          │   └── linux/llama-server (upload manually)
          └── gpu/
              ├── macos/*.py (from CI)
              ├── windows/*.pyd + *.py (upload manually)
              └── linux/*.so + *.py (upload manually)
          ```
          EOF
          
          echo "📁 Release Structure:"
          ls -lhR Release/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: macos-build-${{ github.run_number }}
          name: macOS Binaries (Build ${{ github.run_number }})
          body: |
            ## BitNet macOS Binaries
            
            **Build:** ${{ github.run_number }}
            **Commit:** ${{ github.sha }}
            **Date:** ${{ github.event.head_commit.timestamp }}
            
            ### ✅ Included (Built by CI):
            - macOS CPU binary (ARM64 TL1)
            - macOS GPU modules (Python only)
            
            ### ⏳ To Upload Manually:
            - Windows CPU + GPU (build locally)
            - Linux CPU + GPU (build locally)
            
            ### How to Add Windows/Linux:
            1. Build locally on Windows/WSL2
            2. Upload binaries to this release
            3. Update release notes
            
            For TabAgent integration, manual upload of all platforms required.
          draft: true
          prerelease: false
          files: |
            Release/cpu/macos/llama-server
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

