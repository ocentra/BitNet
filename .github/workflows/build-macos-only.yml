name: Build macOS Binaries (All Variants)

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release after build'
        required: false
        default: 'false'

jobs:
  # ============================================================================
  # Build ALL macOS Variants (ARM + Intel + Standard + Metal)
  # ============================================================================
  build-macos-all:
    name: Build All macOS Variants (4 variants)
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install dependencies
        run: |
          echo "üîß Installing dependencies..."
          brew install cmake
          echo "‚úÖ CMake installed: $(cmake --version | head -1)"
          echo "‚úÖ Clang: $(clang --version | head -1)"
      
      # ========================================================================
      # VARIANT 1: BitNet ARM (M1/M2/M3/M4 with TL1 kernels)
      # ========================================================================
      - name: Build BitNet ARM (Apple Silicon)
        run: |
          echo "üî® Building BitNet ARM (M1/M2/M3/M4 - TL1 kernels)..."
          
          cmake -B build-macos-bitnet-arm \
            -DBITNET_ARM_TL1=ON \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DLLAMA_BUILD_SERVER=ON \
            -DLLAMA_BUILD_EXAMPLES=ON \
            .
          
          if cmake --build build-macos-bitnet-arm --config Release -j; then
            echo "BITNET_ARM_SUCCESS=true" >> $GITHUB_ENV
            echo "‚úÖ BitNet ARM build SUCCESS"
          else
            echo "BITNET_ARM_SUCCESS=false" >> $GITHUB_ENV
            echo "‚ùå BitNet ARM build FAILED"
          fi
      
      # ========================================================================
      # VARIANT 2: BitNet Intel (Intel Macs with TL2 kernels)
      # ========================================================================
      - name: Build BitNet Intel (Intel Macs)
        run: |
          echo "üî® Building BitNet Intel (x86 - TL2 kernels)..."
          
          cmake -B build-macos-bitnet-intel \
            -DBITNET_X86_TL2=ON \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_OSX_ARCHITECTURES=x86_64 \
            -DLLAMA_BUILD_SERVER=ON \
            -DLLAMA_BUILD_EXAMPLES=ON \
            .
          
          if cmake --build build-macos-bitnet-intel --config Release -j; then
            echo "BITNET_INTEL_SUCCESS=true" >> $GITHUB_ENV
            echo "‚úÖ BitNet Intel build SUCCESS"
          else
            echo "BITNET_INTEL_SUCCESS=false" >> $GITHUB_ENV
            echo "‚ùå BitNet Intel build FAILED"
          fi
      
      # ========================================================================
      # VARIANT 3: Standard CPU (no BitNet, universal)
      # ========================================================================
      - name: Build Standard CPU (universal)
        run: |
          echo "üî® Building Standard CPU (no BitNet)..."
          
          cmake -B build-macos-standard-cpu \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DGGML_METAL=OFF \
            -DLLAMA_BUILD_SERVER=ON \
            -DLLAMA_BUILD_EXAMPLES=ON \
            3rdparty/llama.cpp
          
          if cmake --build build-macos-standard-cpu --config Release -j; then
            echo "STANDARD_CPU_SUCCESS=true" >> $GITHUB_ENV
            echo "‚úÖ Standard CPU build SUCCESS"
          else
            echo "STANDARD_CPU_SUCCESS=false" >> $GITHUB_ENV
            echo "‚ùå Standard CPU build FAILED"
          fi
      
      # ========================================================================
      # VARIANT 4: Metal GPU (ALL Macs)
      # ========================================================================
      - name: Build Metal GPU (ALL Macs)
        run: |
          echo "üî® Building Metal GPU (M1/M2/M3 + Intel)..."
          
          cmake -B build-macos-standard-metal \
            -DGGML_METAL=ON \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DLLAMA_BUILD_SERVER=ON \
            -DLLAMA_BUILD_EXAMPLES=ON \
            3rdparty/llama.cpp
          
          if cmake --build build-macos-standard-metal --config Release -j; then
            echo "METAL_GPU_SUCCESS=true" >> $GITHUB_ENV
            echo "‚úÖ Metal GPU build SUCCESS"
          else
            echo "METAL_GPU_SUCCESS=false" >> $GITHUB_ENV
            echo "‚ùå Metal GPU build FAILED"
          fi
      
      # ========================================================================
      # Organize & Copy All Artifacts
      # ========================================================================
      - name: Organize release structure
        run: |
          echo "üìÅ Creating release directory structure..."
          
          # Create all subdirectories
          mkdir -p BitnetRelease/cpu/macos/bitnet-arm
          mkdir -p BitnetRelease/cpu/macos/bitnet-intel
          mkdir -p BitnetRelease/cpu/macos/standard
          mkdir -p BitnetRelease/gpu/macos/standard-metal
          
          echo ""
          echo "=================================================="
          echo "Copying build artifacts to BitnetRelease/..."
          echo "=================================================="
          echo ""
          
          # ================================================================
          # Copy BitNet ARM binaries
          # ================================================================
          if [ "$BITNET_ARM_SUCCESS" = "true" ]; then
            echo "üì¶ Copying BitNet ARM binaries..."
            
            if [ -d "build-macos-bitnet-arm/bin" ]; then
              cp -f build-macos-bitnet-arm/bin/* BitnetRelease/cpu/macos/bitnet-arm/ 2>/dev/null || true
            fi
            
            # Copy .dylib files
            find build-macos-bitnet-arm -name "*.dylib" -type f -exec cp -f {} BitnetRelease/cpu/macos/bitnet-arm/ \; 2>/dev/null || true
            
            chmod +x BitnetRelease/cpu/macos/bitnet-arm/* 2>/dev/null || true
            
            FILE_COUNT=$(ls -1 BitnetRelease/cpu/macos/bitnet-arm/ 2>/dev/null | wc -l)
            echo "  ‚úÖ bitnet-arm: $FILE_COUNT files copied"
          else
            echo "  ‚ö†Ô∏è BitNet ARM build failed - skipping"
          fi
          
          # ================================================================
          # Copy BitNet Intel binaries
          # ================================================================
          if [ "$BITNET_INTEL_SUCCESS" = "true" ]; then
            echo "üì¶ Copying BitNet Intel binaries..."
            
            if [ -d "build-macos-bitnet-intel/bin" ]; then
              cp -f build-macos-bitnet-intel/bin/* BitnetRelease/cpu/macos/bitnet-intel/ 2>/dev/null || true
            fi
            
            # Copy .dylib files
            find build-macos-bitnet-intel -name "*.dylib" -type f -exec cp -f {} BitnetRelease/cpu/macos/bitnet-intel/ \; 2>/dev/null || true
            
            chmod +x BitnetRelease/cpu/macos/bitnet-intel/* 2>/dev/null || true
            
            FILE_COUNT=$(ls -1 BitnetRelease/cpu/macos/bitnet-intel/ 2>/dev/null | wc -l)
            echo "  ‚úÖ bitnet-intel: $FILE_COUNT files copied"
          else
            echo "  ‚ö†Ô∏è BitNet Intel build failed - skipping"
          fi
          
          # ================================================================
          # Copy Standard CPU binaries
          # ================================================================
          if [ "$STANDARD_CPU_SUCCESS" = "true" ]; then
            echo "üì¶ Copying Standard CPU binaries..."
            
            if [ -d "build-macos-standard-cpu/bin" ]; then
              cp -f build-macos-standard-cpu/bin/* BitnetRelease/cpu/macos/standard/ 2>/dev/null || true
            fi
            
            # Copy .dylib files
            find build-macos-standard-cpu -name "*.dylib" -type f -exec cp -f {} BitnetRelease/cpu/macos/standard/ \; 2>/dev/null || true
            
            chmod +x BitnetRelease/cpu/macos/standard/* 2>/dev/null || true
            
            FILE_COUNT=$(ls -1 BitnetRelease/cpu/macos/standard/ 2>/dev/null | wc -l)
            echo "  ‚úÖ standard: $FILE_COUNT files copied"
          else
            echo "  ‚ö†Ô∏è Standard CPU build failed - skipping"
          fi
          
          # ================================================================
          # Copy Metal GPU binaries
          # ================================================================
          if [ "$METAL_GPU_SUCCESS" = "true" ]; then
            echo "üì¶ Copying Metal GPU binaries..."
            
            if [ -d "build-macos-standard-metal/bin" ]; then
              cp -f build-macos-standard-metal/bin/* BitnetRelease/gpu/macos/standard-metal/ 2>/dev/null || true
            fi
            
            # Copy .metallib files (Metal shaders)
            find build-macos-standard-metal -name "*.metallib" -type f -exec cp -f {} BitnetRelease/gpu/macos/standard-metal/ \; 2>/dev/null || true
            
            # Copy .dylib files
            find build-macos-standard-metal -name "*.dylib" -type f -exec cp -f {} BitnetRelease/gpu/macos/standard-metal/ \; 2>/dev/null || true
            
            chmod +x BitnetRelease/gpu/macos/standard-metal/* 2>/dev/null || true
            
            FILE_COUNT=$(ls -1 BitnetRelease/gpu/macos/standard-metal/ 2>/dev/null | wc -l)
            echo "  ‚úÖ standard-metal: $FILE_COUNT files copied"
          else
            echo "  ‚ö†Ô∏è Metal GPU build failed - skipping"
          fi
          
          echo ""
          echo "=================================================="
          echo "Creating README & VERIFICATION files..."
          echo "=================================================="
          
          # Create GPU README
          cat > BitnetRelease/gpu/macos/README.md << 'EOF'
          # üçé macOS GPU Support (Metal Only)
          
          ## What Works on macOS
          
          macOS supports **Metal GPU acceleration** for standard llama.cpp inference.
          
          ### ‚úÖ Supported: Metal GPU
          - **Technology**: Apple Metal (built into macOS)
          - **Hardware**: ALL Macs
            - M1/M2/M3/M4 (Apple Silicon) - **Best performance!**
            - Intel Macs with Iris/AMD GPUs - **Good performance**
          - **Location**: `standard-metal/`
          
          ### ‚ùå NOT Supported on macOS
          - **CUDA**: Apple doesn't support NVIDIA GPUs
          - **Vulkan**: Apple uses Metal instead
          - **BitNet GPU**: Requires CUDA (Windows/Linux only)
          
          ## Quick Start
          
          ```bash
          cd standard-metal/
          
          # Full GPU offload (fastest)
          ./llama-server -m your-model.gguf -ngl 99
          
          # Partial GPU offload (balance CPU/GPU)
          ./llama-server -m your-model.gguf -ngl 35
          ```
          
          ---
          Built by GitHub Actions: ${{ github.run_number }}
          Commit: ${{ github.sha }}
          EOF
          
          # Create CPU VERIFICATION
          cat > BitnetRelease/cpu/macos/VERIFICATION.md << 'EOF'
          # üîç BitNet macOS Build Verification Report
          
          ## Build Matrix
          
          This directory contains **4 macOS variants** (3 CPU + 1 GPU):
          
          ### CPU Variants
          - **bitnet-arm/** - BitNet for Apple Silicon (M1/M2/M3/M4 with TL1 kernels)
          - **bitnet-intel/** - BitNet for Intel Macs (x86 with TL2 kernels)
          - **standard/** - Standard llama.cpp (universal, no BitNet)
          
          ### GPU Variant
          - **standard-metal/** - Metal GPU acceleration (ALL Macs)
          
          ## Quick Start
          
          ### For M1/M2/M3/M4 (Apple Silicon):
          ```bash
          cd bitnet-arm/
          ./llama-server -m bitnet-model.gguf
          ```
          
          ### For Intel Macs:
          ```bash
          cd bitnet-intel/
          ./llama-server -m bitnet-model.gguf
          ```
          
          ### For Metal GPU (Best Performance):
          ```bash
          cd ../gpu/macos/standard-metal/
          ./llama-server -m model.gguf -ngl 35  # Offload 35 layers to GPU
          ```
          
          ## Technical Details
          
          - **Compiler:** Clang (from Xcode)
          - **BitNet TL1:** ARM-optimized kernels for M1/M2/M3/M4
          - **BitNet TL2:** x86-optimized kernels for Intel
          - **Metal:** Apple's GPU framework (all Macs)
          
          ---
          Built by GitHub Actions: ${{ github.run_number }}
          Commit: ${{ github.sha }}
          Date: ${{ github.event.head_commit.timestamp }}
          EOF
          
          echo "‚úÖ README & VERIFICATION files created"
          
          echo ""
          echo "=================================================="
          echo "BUILD SUMMARY"
          echo "=================================================="
          echo ""
          echo "BitNet ARM:     $([ "$BITNET_ARM_SUCCESS" = "true" ] && echo "‚úÖ SUCCESS" || echo "‚ùå FAILED")"
          echo "BitNet Intel:   $([ "$BITNET_INTEL_SUCCESS" = "true" ] && echo "‚úÖ SUCCESS" || echo "‚ùå FAILED")"
          echo "Standard CPU:   $([ "$STANDARD_CPU_SUCCESS" = "true" ] && echo "‚úÖ SUCCESS" || echo "‚ùå FAILED")"
          echo "Metal GPU:      $([ "$METAL_GPU_SUCCESS" = "true" ] && echo "‚úÖ SUCCESS" || echo "‚ùå FAILED")"
          echo ""
          echo "=================================================="
          echo "FINAL STRUCTURE"
          echo "=================================================="
          echo ""
          echo "BitnetRelease/cpu/macos/"
          ls -lh BitnetRelease/cpu/macos/ 2>/dev/null || echo "  (empty)"
          echo ""
          for subdir in bitnet-arm bitnet-intel standard; do
            if [ -d "BitnetRelease/cpu/macos/$subdir" ]; then
              COUNT=$(ls -1 BitnetRelease/cpu/macos/$subdir 2>/dev/null | wc -l)
              echo "  $subdir/: $COUNT files"
            fi
          done
          echo ""
          echo "BitnetRelease/gpu/macos/"
          ls -lh BitnetRelease/gpu/macos/ 2>/dev/null || echo "  (empty)"
          echo ""
          if [ -d "BitnetRelease/gpu/macos/standard-metal" ]; then
            COUNT=$(ls -1 BitnetRelease/gpu/macos/standard-metal 2>/dev/null | wc -l)
            echo "  standard-metal/: $COUNT files"
          fi
      
      # ========================================================================
      # Create Downloadable ZIP
      # ========================================================================
      - name: Create ZIP artifact
        run: |
          echo "üì¶ Creating ZIP archive for download..."
          
          cd BitnetRelease
          
          # Zip CPU variants
          zip -r ../macos-cpu-all.zip cpu/macos/
          
          # Zip GPU variant
          zip -r ../macos-gpu-metal.zip gpu/macos/
          
          # Zip everything together
          cd ..
          zip -r macos-complete.zip BitnetRelease/
          
          echo ""
          echo "‚úÖ ZIP files created:"
          ls -lh macos-*.zip
      
      # ========================================================================
      # Upload Artifacts
      # ========================================================================
      - name: Upload CPU artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-cpu-all
          path: macos-cpu-all.zip
          retention-days: 90
      
      - name: Upload GPU artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-gpu-metal
          path: macos-gpu-metal.zip
          retention-days: 90
      
      - name: Upload Complete Build
        uses: actions/upload-artifact@v4
        with:
          name: macos-complete-build
          path: macos-complete.zip
          retention-days: 90
      
      # ========================================================================
      # Create GitHub Release (Optional)
      # ========================================================================
      - name: Create GitHub Release
        if: github.event.inputs.create_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: macos-build-${{ github.run_number }}
          name: macOS Complete Build (Build ${{ github.run_number }})
          body: |
            ## üçé BitNet macOS Complete Build
            
            **Build:** ${{ github.run_number }}
            **Commit:** ${{ github.sha }}
            **Date:** ${{ github.event.head_commit.timestamp }}
            
            ### ‚úÖ What's Included:
            - **BitNet ARM** - M1/M2/M3/M4 with TL1 kernels
            - **BitNet Intel** - Intel Macs with TL2 kernels
            - **Standard CPU** - Universal, no BitNet
            - **Metal GPU** - ALL Macs (M1/M2/M3 + Intel)
            
            ### üì¶ Download Options:
            - **macos-complete.zip** - Everything (CPU + GPU)
            - **macos-cpu-all.zip** - Just CPU variants (3 variants)
            - **macos-gpu-metal.zip** - Just Metal GPU variant
            
            ### üìÅ Extract & Use:
            ```bash
            # Download macos-complete.zip
            unzip macos-complete.zip
            
            # For Apple Silicon (M1/M2/M3):
            cd BitnetRelease/cpu/macos/bitnet-arm/
            ./llama-server -m model.gguf
            
            # For Metal GPU (best performance):
            cd BitnetRelease/gpu/macos/standard-metal/
            ./llama-server -m model.gguf -ngl 99
            ```
            
            ### üöÄ TabAgent Integration:
            Extract to your TabAgent Server's `BitnetRelease/` folder:
            ```bash
            unzip macos-complete.zip -d /path/to/TabAgent/Server/BitNet/
            ```
          draft: false
          prerelease: false
          files: |
            macos-complete.zip
            macos-cpu-all.zip
            macos-gpu-metal.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
