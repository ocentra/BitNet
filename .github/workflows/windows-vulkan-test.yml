name: Windows Vulkan SDK Test - multi-try

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/windows-vulkan-test.yml'

jobs:
  windows-vulkan-multi-try:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Vulkan SDK via winget
        shell: pwsh
        continue-on-error: true
        run: |
          try {
            Write-Output "Attempting winget install..."
            winget install --id KhronosGroup.VulkanSDK -e --silent --accept-source-agreements --accept-package-agreements
            if ($LASTEXITCODE -ne 0) { Write-Output "winget returned code $LASTEXITCODE" }
          } catch {
            Write-Output "winget install failed: $($_.Exception.Message)"
          }

      - name: Verify after winget
        id: verify_winget
        shell: pwsh
        run: |
          $ok = $false
          if (Get-Command vulkaninfo -ErrorAction SilentlyContinue) { $ok = $true }
          elseif ($env:VULKAN_SDK) { $ok = $true }
          echo "ok=$ok" >> $env:GITHUB_OUTPUT

      - name: Install Vulkan SDK directly from LunarG (manual - try multiple versions)
        shell: pwsh
        continue-on-error: true
        env:
          VERSIONS: '1.3.239.0,1.3.250.0,1.3.268.0,1.3.275.0'
        run: |
          $found = $false
          foreach ($ver in $env:VERSIONS.Split(',')) {
            $ver = $ver.Trim()
            $exe = "VulkanSDK-$ver-Installer.exe"
            $url = "https://sdk.lunarg.com/sdk/download/$ver/windows/$exe"
            Write-Output "Testing $url"
            $resp = Invoke-WebRequest -Uri $url -Method Head -UseBasicParsing -ErrorAction SilentlyContinue
            if ($resp -and $resp.StatusCode -eq 200) {
              Write-Output "Found installer for $ver, downloading..."
              Invoke-WebRequest -Uri $url -OutFile $exe -UseBasicParsing
              Write-Output "Running installer (silent)..."
              Start-Process -FilePath $exe -ArgumentList '/S' -Wait
              # Set environment for subsequent steps
              $instPath = "C:\VulkanSDK\$ver"
              if (-Not (Test-Path $instPath) -and (Test-Path "C:\VulkanSDK")) {
                # try to find installed version directory
                $dirs = Get-ChildItem -Directory C:\VulkanSDK -ErrorAction SilentlyContinue
                if ($dirs) { $instPath = $dirs[0].FullName }
              }
              if (Test-Path $instPath) {
                Write-Output "Adding ${instPath}\Bin to PATH for remaining steps"
                echo "VULKAN_SDK=$instPath" >> $env:GITHUB_ENV
                echo "${instPath}\Bin" >> $env:GITHUB_PATH
              }
              $found = $true
              break
            } else {
              Write-Output "No installer at $url (status: $($resp.StatusCode))"
            }
          }
          if (-not $found) { Write-Output "No LunarG installer found for any tried version." }

      - name: Verify after manual install
        id: verify_manual
        shell: pwsh
        run: |
          $ok = $false
          if (Get-Command vulkaninfo -ErrorAction SilentlyContinue) { $ok = $true }
          elseif ($env:VULKAN_SDK) { $ok = $true }
          echo "ok=$ok" >> $env:GITHUB_OUTPUT

      - name: Install Vulkan SDK via Chocolatey (last resort)
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Output "Attempting Chocolatey install (may 404 if package requires private CDN)..."
          choco install vulkan-sdk -y
          if ($LASTEXITCODE -ne 0) { Write-Output "choco install returned code $LASTEXITCODE" }

      - name: Final verification and report
        shell: pwsh
        run: |
          $ok = $false
          $src = ''
          if (Get-Command vulkaninfo -ErrorAction SilentlyContinue) {
            $ok = $true; $src = 'vulkaninfo'
          } elseif ($env:VULKAN_SDK) {
            $ok = $true; $src = 'VULKAN_SDK env'
          }
          if ($ok) {
            Write-Output "✅ Vulkan SDK detected (source: $src)."
            if (Get-Command vulkaninfo -ErrorAction SilentlyContinue) {
              & vulkaninfo --summary
            } else {
              Write-Output "VULKAN_SDK=$env:VULKAN_SDK"
              if (Test-Path "$env:VULKAN_SDK\Bin") { Get-ChildItem "$env:VULKAN_SDK\Bin" } else { Write-Output "Bin not found" }
            }
          } else {
            Write-Error "❌ Vulkan SDK not found after all attempts. See the logs above for each method (winget, manual, choco)."
            exit 1
          }