name: Windows Vulkan SDK Test - multi-try

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/windows-vulkan-test.yml'

jobs:
  windows-vulkan-multi-try:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Try Marketplace action (recommended)
      - name: Install Vulkan SDK (Marketplace action)
        id: action_install
        uses: Duber/vulkan-sdk-action@v2
        with:
          sdk-version: '1.3.239.0' # change or remove to get latest
        continue-on-error: true

      - name: Verify after Marketplace action
        id: verify_action
        shell: powershell
        run: |
          $ok = $false
          if (Get-Command vulkaninfo -ErrorAction SilentlyContinue) { $ok = $true }
          elseif (Test-Path Env:VULKAN_SDK) { $ok = $true }
          if ($ok) {
            Write-Output 'Marketplace action succeeded'
            echo "ok=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Output 'Marketplace action did not install Vulkan SDK'
            echo "ok=false" >> $env:GITHUB_OUTPUT
          }

      # 2) Try winget if previous attempt didn't succeed
      - name: Install Vulkan SDK via winget
        id: winget_install
        if: steps.verify_action.outputs.ok != 'true'
        shell: powershell
        continue-on-error: true
        run: |
          Write-Output "Attempting winget install..."
          winget install --id KhronosGroup.VulkanSDK -e --silent || Write-Output "winget install failed (non-fatal)."

      - name: Verify after winget
        id: verify_winget
        if: steps.verify_action.outputs.ok != 'true'
        shell: powershell
        run: |
          $ok = $false
          if (Get-Command vulkaninfo -ErrorAction SilentlyContinue) { $ok = $true }
          elseif (Test-Path Env:VULKAN_SDK) { $ok = $true }
          if ($ok) {
            Write-Output 'winget install succeeded'
            echo "ok=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Output 'winget did not install Vulkan SDK'
            echo "ok=false" >> $env:GITHUB_OUTPUT
          }

      # 3) Try direct LunarG download if still not installed
      - name: Install Vulkan SDK directly from LunarG
        id: manual_install
        if: steps.verify_action.outputs.ok != 'true' && (steps.verify_winget.outputs.ok != 'true' || steps.verify_winget.outputs.ok == '')
        shell: powershell
        continue-on-error: true
        env:
          VULKAN_VER: '1.3.239.0' # change to the exact version you want to try
        run: |
          $ver = $env:VULKAN_VER
          $exe = "VulkanSDK-$ver-Installer.exe"
          $url = "https://sdk.lunarg.com/sdk/download/$ver/windows/$exe"
          Write-Output "Testing URL: $url"
          try {
            Invoke-WebRequest -Uri $url -Method Head -UseBasicParsing -ErrorAction Stop
          } catch {
            Write-Output "Installer URL not reachable: $url"
            exit 0
          }
          Write-Output "Downloading installer..."
          Invoke-WebRequest -Uri $url -OutFile $exe -UseBasicParsing
          Write-Output "Running installer (silent)..."
          Start-Process -FilePath $exe -ArgumentList '/S' -Wait
          Write-Output "Manual install step finished (may need to refresh env)."

      - name: Verify after manual install
        id: verify_manual
        if: steps.verify_action.outputs.ok != 'true' && (steps.verify_winget.outputs.ok != 'true' || steps.verify_winget.outputs.ok == '')
        shell: powershell
        run: |
          $ok = $false
          if (Get-Command vulkaninfo -ErrorAction SilentlyContinue) { $ok = $true }
          elseif (Test-Path Env:VULKAN_SDK) { $ok = $true }
          if ($ok) {
            Write-Output 'Manual LunarG install succeeded'
            echo "ok=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Output 'Manual install did not install Vulkan SDK'
            echo "ok=false" >> $env:GITHUB_OUTPUT
          }

      # 4) Optional: try Chocolatey as last attempt (warning: choco package often requires private CDN)
      - name: Install Vulkan SDK via Chocolatey (last resort)
        id: choco_install
        if: steps.verify_action.outputs.ok != 'true' && steps.verify_winget.outputs.ok != 'true' && steps.verify_manual.outputs.ok != 'true'
        shell: powershell
        continue-on-error: true
        run: |
          Write-Output "Attempting Chocolatey install (may 404 if package requires licensed/private CDN)..."
          choco install vulkan-sdk -y || Write-Output "Chocolatey install failed (non-fatal)."

      - name: Final verification and report
        id: final_verify
        shell: powershell
        run: |
          $ok = $false
          if (Get-Command vulkaninfo -ErrorAction SilentlyContinue) { $ok = $true; $src = 'vulkaninfo' }
          elseif (Test-Path Env:VULKAN_SDK) { $ok = $true; $src = 'VULKAN_SDK env' }
          if ($ok) {
            Write-Output "✅ Vulkan SDK detected (source: $src)."
            if (Get-Command vulkaninfo -ErrorAction SilentlyContinue) {
              & vulkaninfo --summary
            } else {
              Write-Output "VULKAN_SDK=$env:VULKAN_SDK"
              Write-Output "Contents of $env:VULKAN_SDK\Bin (if exists):"
              if (Test-Path "$env:VULKAN_SDK\Bin") { Get-ChildItem "$env:VULKAN_SDK\Bin" } else { Write-Output "Bin not found" }
            }
          } else {
            Write-Error "❌ Vulkan SDK not found after all attempts. Check logs for each method above. Consider using the Marketplace action or winget and pin a known-working version."
            exit 1
          }